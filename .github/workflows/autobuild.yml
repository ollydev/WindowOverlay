name: Auto Build

on: [push, pull_request]

jobs:
  test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env: 
      OS: ${{ matrix.config.os }}
      LAZ_VER: ${{ matrix.config.LAZ_VER }}
      LAZ_OPT: ${{ matrix.config.LAZ_OPT }}
      ARTIFACT: ${{ matrix.config.ARTIFACT }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: windows-latest
            name: Windows 32
            LAZ_VER: 2.0.8
            LAZ_OPT: "--build-mode=WIN32"
            ARTIFACT: "libwindowoverlay32.dll"

          - os: windows-latest
            name: Windows 64
            LAZ_VER: 2.0.8
            LAZ_OPT: "--build-mode=WIN64"
            ARTIFACT: "libwindowoverlay64.dll"

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Install Lazarus
      shell: python
      run: |
        import sys
        import os
        import subprocess
        import re
        
        try:
            from urllib import quote
        except ImportError:
            from urllib.parse import quote

        OS_NAME = os.environ.get('RUNNER_OS')
        OS_PMAN = {'Linux': 'sudo apt-get', 'Windows': 'choco', 'macOS': 'brew'}[OS_NAME]

        LAZ_DOWNLOAD_DIR = '.laz'
        LAZ_BIN_ROOT = 'https://sourceforge.net/projects/lazarus/files/'
        LAZ_BIN_TARGET = {
            'Linux':   'Lazarus Linux amd64 DEB/Lazarus %(version)s',
            'Windows': 'Lazarus Windows 64 bits/Lazarus %(version)s',
            'macOS':   'Lazarus macOS x86-64/Lazarus %(version)s'
        }[OS_NAME]

        def install_lazarus_version(ver):

            url = LAZ_BIN_TARGET % {'version': ver}
            url = LAZ_BIN_ROOT + quote(url)

            # Collect all download links on target version
            assets = re.findall("https://(.*?)/download", subprocess.check_output('wget -O- %s' % (url), shell=True).decode('utf-8'))
            for asset in list(set(assets)):
                subprocess.call('wget --progress=dot:mega -P "%s" %s' % (LAZ_DOWNLOAD_DIR, asset), shell=True)

            if OS_NAME == 'Windows':
                 # Add Lazarus directory to PATH
                 if subprocess.call('echo ::add-path::C:\\Lazarus\\', shell=True) != 0:
                     return False

                 # Install all .exe files
                 process_file = lambda f: (not f.endswith('.exe')) or subprocess.call('%s /VERYSILENT /DIR="C:\Lazarus"' % (f), shell=True) == 0
            elif OS_NAME == 'Linux':
                # Install dependencies
                if subprocess.call('%s install libgtk2.0-dev' % (OS_PMAN), shell=True) != 0:
                    return False

                # Install all .deb files
                process_file = lambda f: (not f.endswith('.deb')) or subprocess.call('sudo dpkg --force-overwrite -i %s' % (f), shell=True) == 0
            elif OS_NAME == 'macOS':
                # Install all .pkg files
                process_file = lambda f: (not f.endswith('.pkg')) or subprocess.call('sudo installer -pkg %s -target /' % (f), shell=True) == 0 
            else:
                return False

            # Process all downloaded files
            if not all(map(lambda f: process_file(os.path.join(LAZ_DOWNLOAD_DIR, f)), sorted(os.listdir(LAZ_DOWNLOAD_DIR)))):
                return False

            return True

        def main():
            if subprocess.call('%s install wget' % (OS_PMAN), shell=True) != 0:
                return False

            return install_lazarus_version(os.environ.get('LAZ_VER'))

        sys.exit(int(not main()))

    - name: Build Window Overlay
      run: lazbuild ${{ env.LAZ_OPT }} "libwindowoverlay.lpi"

    - name: Upload Binaries
      uses: ollydev/upload-release-action@master
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.ARTIFACT }}
        asset_name: ${{ env.ARTIFACT }}
        tag: autobuild
        overwrite: true